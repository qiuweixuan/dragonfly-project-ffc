#include <gmpxx.h>
#include <assert.h>
#include <iostream>
#include <cstdio>
#include <random>
#include "include/point.h"
#include "include/mpz_math.h"
#include "include/peer.h"
using namespace std;

static const unsigned char dh_group15_prime[384] = {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xC9, 0x0F, 0xDA, 0xA2, 0x21, 0x68, 0xC2, 0x34,
    0xC4, 0xC6, 0x62, 0x8B, 0x80, 0xDC, 0x1C, 0xD1,
    0x29, 0x02, 0x4E, 0x08, 0x8A, 0x67, 0xCC, 0x74,
    0x02, 0x0B, 0xBE, 0xA6, 0x3B, 0x13, 0x9B, 0x22,
    0x51, 0x4A, 0x08, 0x79, 0x8E, 0x34, 0x04, 0xDD,
    0xEF, 0x95, 0x19, 0xB3, 0xCD, 0x3A, 0x43, 0x1B,
    0x30, 0x2B, 0x0A, 0x6D, 0xF2, 0x5F, 0x14, 0x37,
    0x4F, 0xE1, 0x35, 0x6D, 0x6D, 0x51, 0xC2, 0x45,
    0xE4, 0x85, 0xB5, 0x76, 0x62, 0x5E, 0x7E, 0xC6,
    0xF4, 0x4C, 0x42, 0xE9, 0xA6, 0x37, 0xED, 0x6B,
    0x0B, 0xFF, 0x5C, 0xB6, 0xF4, 0x06, 0xB7, 0xED,
    0xEE, 0x38, 0x6B, 0xFB, 0x5A, 0x89, 0x9F, 0xA5,
    0xAE, 0x9F, 0x24, 0x11, 0x7C, 0x4B, 0x1F, 0xE6,
    0x49, 0x28, 0x66, 0x51, 0xEC, 0xE4, 0x5B, 0x3D,
    0xC2, 0x00, 0x7C, 0xB8, 0xA1, 0x63, 0xBF, 0x05,
    0x98, 0xDA, 0x48, 0x36, 0x1C, 0x55, 0xD3, 0x9A,
    0x69, 0x16, 0x3F, 0xA8, 0xFD, 0x24, 0xCF, 0x5F,
    0x83, 0x65, 0x5D, 0x23, 0xDC, 0xA3, 0xAD, 0x96,
    0x1C, 0x62, 0xF3, 0x56, 0x20, 0x85, 0x52, 0xBB,
    0x9E, 0xD5, 0x29, 0x07, 0x70, 0x96, 0x96, 0x6D,
    0x67, 0x0C, 0x35, 0x4E, 0x4A, 0xBC, 0x98, 0x04,
    0xF1, 0x74, 0x6C, 0x08, 0xCA, 0x18, 0x21, 0x7C,
    0x32, 0x90, 0x5E, 0x46, 0x2E, 0x36, 0xCE, 0x3B,
    0xE3, 0x9E, 0x77, 0x2C, 0x18, 0x0E, 0x86, 0x03,
    0x9B, 0x27, 0x83, 0xA2, 0xEC, 0x07, 0xA2, 0x8F,
    0xB5, 0xC5, 0x5D, 0xF0, 0x6F, 0x4C, 0x52, 0xC9,
    0xDE, 0x2B, 0xCB, 0xF6, 0x95, 0x58, 0x17, 0x18,
    0x39, 0x95, 0x49, 0x7C, 0xEA, 0x95, 0x6A, 0xE5,
    0x15, 0xD2, 0x26, 0x18, 0x98, 0xFA, 0x05, 0x10,
    0x15, 0x72, 0x8E, 0x5A, 0x8A, 0xAA, 0xC4, 0x2D,
    0xAD, 0x33, 0x17, 0x0D, 0x04, 0x50, 0x7A, 0x33,
    0xA8, 0x55, 0x21, 0xAB, 0xDF, 0x1C, 0xBA, 0x64,
    0xEC, 0xFB, 0x85, 0x04, 0x58, 0xDB, 0xEF, 0x0A,
    0x8A, 0xEA, 0x71, 0x57, 0x5D, 0x06, 0x0C, 0x7D,
    0xB3, 0x97, 0x0F, 0x85, 0xA6, 0xE1, 0xE4, 0xC7,
    0xAB, 0xF5, 0xAE, 0x8C, 0xDB, 0x09, 0x33, 0xD7,
    0x1E, 0x8C, 0x94, 0xE0, 0x4A, 0x25, 0x61, 0x9D,
    0xCE, 0xE3, 0xD2, 0x26, 0x1A, 0xD2, 0xEE, 0x6B,
    0xF1, 0x2F, 0xFA, 0x06, 0xD9, 0x8A, 0x08, 0x64,
    0xD8, 0x76, 0x02, 0x73, 0x3E, 0xC8, 0x6A, 0x64,
    0x52, 0x1F, 0x2B, 0x18, 0x17, 0x7B, 0x20, 0x0C,
    0xBB, 0xE1, 0x17, 0x57, 0x7A, 0x61, 0x5D, 0x6C,
    0x77, 0x09, 0x88, 0xC0, 0xBA, 0xD9, 0x46, 0xE2,
    0x08, 0xE2, 0x4F, 0xA0, 0x74, 0xE5, 0xAB, 0x31,
    0x43, 0xDB, 0x5B, 0xFC, 0xE0, 0xFD, 0x10, 0x8E,
    0x4B, 0x82, 0xD1, 0x20, 0xA9, 0x3A, 0xD2, 0xCA,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
static const unsigned char dh_group15_order[384] = {
    0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xE4, 0x87, 0xED, 0x51, 0x10, 0xB4, 0x61, 0x1A,
    0x62, 0x63, 0x31, 0x45, 0xC0, 0x6E, 0x0E, 0x68,
    0x94, 0x81, 0x27, 0x04, 0x45, 0x33, 0xE6, 0x3A,
    0x01, 0x05, 0xDF, 0x53, 0x1D, 0x89, 0xCD, 0x91,
    0x28, 0xA5, 0x04, 0x3C, 0xC7, 0x1A, 0x02, 0x6E,
    0xF7, 0xCA, 0x8C, 0xD9, 0xE6, 0x9D, 0x21, 0x8D,
    0x98, 0x15, 0x85, 0x36, 0xF9, 0x2F, 0x8A, 0x1B,
    0xA7, 0xF0, 0x9A, 0xB6, 0xB6, 0xA8, 0xE1, 0x22,
    0xF2, 0x42, 0xDA, 0xBB, 0x31, 0x2F, 0x3F, 0x63,
    0x7A, 0x26, 0x21, 0x74, 0xD3, 0x1B, 0xF6, 0xB5,
    0x85, 0xFF, 0xAE, 0x5B, 0x7A, 0x03, 0x5B, 0xF6,
    0xF7, 0x1C, 0x35, 0xFD, 0xAD, 0x44, 0xCF, 0xD2,
    0xD7, 0x4F, 0x92, 0x08, 0xBE, 0x25, 0x8F, 0xF3,
    0x24, 0x94, 0x33, 0x28, 0xF6, 0x72, 0x2D, 0x9E,
    0xE1, 0x00, 0x3E, 0x5C, 0x50, 0xB1, 0xDF, 0x82,
    0xCC, 0x6D, 0x24, 0x1B, 0x0E, 0x2A, 0xE9, 0xCD,
    0x34, 0x8B, 0x1F, 0xD4, 0x7E, 0x92, 0x67, 0xAF,
    0xC1, 0xB2, 0xAE, 0x91, 0xEE, 0x51, 0xD6, 0xCB,
    0x0E, 0x31, 0x79, 0xAB, 0x10, 0x42, 0xA9, 0x5D,
    0xCF, 0x6A, 0x94, 0x83, 0xB8, 0x4B, 0x4B, 0x36,
    0xB3, 0x86, 0x1A, 0xA7, 0x25, 0x5E, 0x4C, 0x02,
    0x78, 0xBA, 0x36, 0x04, 0x65, 0x0C, 0x10, 0xBE,
    0x19, 0x48, 0x2F, 0x23, 0x17, 0x1B, 0x67, 0x1D,
    0xF1, 0xCF, 0x3B, 0x96, 0x0C, 0x07, 0x43, 0x01,
    0xCD, 0x93, 0xC1, 0xD1, 0x76, 0x03, 0xD1, 0x47,
    0xDA, 0xE2, 0xAE, 0xF8, 0x37, 0xA6, 0x29, 0x64,
    0xEF, 0x15, 0xE5, 0xFB, 0x4A, 0xAC, 0x0B, 0x8C,
    0x1C, 0xCA, 0xA4, 0xBE, 0x75, 0x4A, 0xB5, 0x72,
    0x8A, 0xE9, 0x13, 0x0C, 0x4C, 0x7D, 0x02, 0x88,
    0x0A, 0xB9, 0x47, 0x2D, 0x45, 0x55, 0x62, 0x16,
    0xD6, 0x99, 0x8B, 0x86, 0x82, 0x28, 0x3D, 0x19,
    0xD4, 0x2A, 0x90, 0xD5, 0xEF, 0x8E, 0x5D, 0x32,
    0x76, 0x7D, 0xC2, 0x82, 0x2C, 0x6D, 0xF7, 0x85,
    0x45, 0x75, 0x38, 0xAB, 0xAE, 0x83, 0x06, 0x3E,
    0xD9, 0xCB, 0x87, 0xC2, 0xD3, 0x70, 0xF2, 0x63,
    0xD5, 0xFA, 0xD7, 0x46, 0x6D, 0x84, 0x99, 0xEB,
    0x8F, 0x46, 0x4A, 0x70, 0x25, 0x12, 0xB0, 0xCE,
    0xE7, 0x71, 0xE9, 0x13, 0x0D, 0x69, 0x77, 0x35,
    0xF8, 0x97, 0xFD, 0x03, 0x6C, 0xC5, 0x04, 0x32,
    0x6C, 0x3B, 0x01, 0x39, 0x9F, 0x64, 0x35, 0x32,
    0x29, 0x0F, 0x95, 0x8C, 0x0B, 0xBD, 0x90, 0x06,
    0x5D, 0xF0, 0x8B, 0xAB, 0xBD, 0x30, 0xAE, 0xB6,
    0x3B, 0x84, 0xC4, 0x60, 0x5D, 0x6C, 0xA3, 0x71,
    0x04, 0x71, 0x27, 0xD0, 0x3A, 0x72, 0xD5, 0x98,
    0xA1, 0xED, 0xAD, 0xFE, 0x70, 0x7E, 0x88, 0x47,
    0x25, 0xC1, 0x68, 0x90, 0x54, 0x9D, 0x69, 0x65,
    0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

int main()
{
    /* 
    printf("prime:\n");
    for (int i = 0; i < 384; i++)
    {
        printf("%02x", dh_group15_prime[i]);
    }
    printf("\n");

    printf("order:\n");
    for (int i = 0; i < 384; i++)
    {
        printf("%02x", dh_group15_order[i]);
    }
    printf("\n"); 
    */
    /* 
    auto &&split_mac = mac2vec("02:00:00:00:01:00");
    for (auto &&elem : split_mac)
    {
        printf("%02x", elem);
    }
    printf("\n");
    */

    gmp_randinit_default(RANDSTATE);

    // Peer sta("abc1238", "44:67:2D:2C:91:A6", "STA");
    // Peer ap("abc1238", "44:37:2C:2F:91:36", "AP");

    Peer sta("abcdefgh", "02:00:00:00:01:00", "STA");
    Peer ap("abcdefgh", "02:00:00:00:00:00", "AP");

    gmp_printf("---------------------------------------------------\n");
    gmp_printf("Starting hunting and pecking to derive PE...\n");
    gmp_printf("---------------------------------------------------\n");
    sta.initiate(ap.mac_address);
    gmp_printf("---------------------------------------------------\n");
    ap.initiate(sta.mac_address);
    gmp_printf("---------------------------------------------------\n");

    string sta_priv = "36 9d e1 45 82 82 fb 76 54 8b 6b 88 d2 5e b1 b3 9b 85 20 2e 58 78 00 04 c5 00 d9 e2 d4 48 ce e0 23 a4 1e 01 e4 a3 85 7b e2 97 ca 9b 0a eb 71 0f ac 96 5a 19 2c a4 50 f2 b1 d0 45 91 9e 15 40 09 6e 14 4f 31 b0 8a a5 56 75 85 50 9b 5a f4 17 cc 3a ec a5 d5 d1 e7 b4 d9 bd 08 a2 3b 21 e1 0e da 59 a3 0e f9 41 72 27 f2 6f 19 b2 31 4e 20 ed c3 1e 23 7e 41 51 73 7f 47 9a a7 f2 af 13 74 d9 91 9b a9 5a fe 81 9a 52 2f 33 ec 74 67 14 a7 96 57 92 b9 3e bd 3e 3b 23 b3 dc f5 b6 c0 33 fe 6e 71 a7 3d 07 27 e4 9b 29 4b b1 04 c6 df b3 d0 fa 6c 30 33 f6 28 3b 1e 84 52 7d db 3e 85 1c d3 e8 6e e3 bd d4 19 81 66 90 5d 62 8a c1 85 56 94 48 61 a1 90 fa ea c7 a4 b5 a3 9d 00 90 53 3d b2 6e 24 ae a4 78 5b 19 24 a8 a2 b7 2e 77 4d 96 50 6a 67 69 e2 9a 29 52 54 63 40 6a 8d a9 9e 57 70 04 09 26 6e d3 d3 22 4e 69 72 1c 02 77 6d f2 1a 83 1f 52 78 b0 e8 a0 58 9e 9c 57 50 62 24 f6 75 48 3b 9c 1a 10 e2 98 42 bb 36 01 de 3e 4b 49 5a 67 86 0d fa 67 ce d8 e0 06 81 8c ff 92 60 9e 03 44 47 37 a6 3e ed f7 ef f4 71 2e 89 54 08 5d 69 6d e7 33 ae ca 74 b8 29 c0 a4 98 cc b1 7e df 4d 33 f7 27 ae cb d5 31 3b 15 30 15 4a 59 50 a0 db 81 1e 09 ac 53 01 ca 44 04 e1 2e 39 d0 10 dc b5 7a 4d";
    string sta_mask = "6a ca 2c cb 86 7c c9 b1 88 27 a0 cc eb f9 76 c5 2d 8e ef 21 b5 26 f8 14 9a 56 23 89 0f 91 62 02 01 a2 5e 44 a6 2a 3b d5 4a 58 0a b8 66 f1 30 5e 8a c0 80 fb 0c ea 31 91 2e ca b3 5f f4 0c 11 da cd 76 01 d0 24 7f 3a 61 5e bb 11 7f 9b af d7 e8 88 c8 62 56 86 39 2f 92 6f a8 c3 09 22 f1 d3 99 75 2e fe 97 e9 7b 7d e0 9b 0b 68 da bb e1 5f 53 12 7f e8 04 91 60 e9 ff 5c 3b aa f4 8d e0 c6 c9 3f 6e 36 13 9c 7e 29 d1 20 27 e7 57 50 00 3a 8d a9 6d 3c 17 33 99 11 6c 94 22 9a dd 40 f1 24 f9 0f db 8f 40 87 71 3f f7 48 76 2f 0b 21 06 32 ac 9b 18 62 18 e0 df b7 be 00 bc 20 38 f3 87 ea 23 95 92 6c ca 22 db 6b 21 50 1c 48 24 2d f8 ca c7 8a c0 c5 0a 64 99 55 68 67 dd 86 c9 22 5a 6b 67 ef 91 4e 6b 11 7b 19 43 53 71 d8 60 10 74 05 27 be 3a a5 c2 58 ac 70 7a 76 4d 63 28 87 fc f0 96 c4 c1 ee 20 37 ed cf 03 8a 00 e9 a8 44 6b b5 4d 93 de c9 95 79 72 52 fb 89 70 65 d3 63 02 25 77 13 12 8a 87 df b0 56 60 68 14 e3 b8 dd c6 db 19 09 7b ff dc c9 f9 11 3d 47 f1 1c a0 e6 f7 23 39 af 8c 0b 10 30 ff 91 17 b8 62 9d ff a2 17 1d df 6f 30 04 f1 eb 4b ea ae 6b ab 20 14 6e 7f 06 b4 98 7a be 2c b4 25 85 01 4a b2 03 54 4e 82 f4 7f 44 21 71 1d d7 fa 8c 43 dd 31 24 15 9c f1 e0 65";
    trim(sta_priv, ' ');
    trim(sta_mask, ' ');
    cout << "sta_priv:" << sta_priv << endl;
    cout << "sta_mask:" << sta_mask << endl;

    string ap_priv = "7e cc 5a 3d 7f 9c fe e1 56 b0 ad a0 eb 2d 2a 2a b2 bc a0 37 f1 f4 d5 f9 85 63 d8 f8 9f 83 5c e6 c4 5e b3 af 30 5d b1 d3 d7 06 cc e8 25 9c 79 0c 06 a2 ef 5e 1e 03 71 bf 6b e0 80 4f 2e fd 07 aa f8 1d 2d ac 36 fc 06 a2 21 e5 95 d3 40 82 0d b5 a0 59 d6 2b b3 35 ae eb cd 5d 08 fa ea 37 9a 1a 45 b3 ba 15 89 d2 6b 21 22 e7 e7 93 f2 c2 6d d3 96 19 75 31 ed 3f 4c 8d c7 ab a1 7e d6 97 c7 18 2a 00 9e be 69 42 08 f0 40 eb ca 0e 49 dd b6 3b ac 80 90 06 fe c2 93 10 23 6f 6c ca e1 90 dc c8 5a c3 07 dc cd c2 9e 7f 1a 0e a6 12 53 2b 3e 19 e6 1c ff 3b 8d 87 39 8e 72 ba 75 3c b2 9e 7b 91 df 04 0d ed 44 c4 93 4e 00 2e 36 79 bf 31 94 a1 3c b7 80 60 19 ac fd 7e b2 f4 a1 98 fb e8 ae 0f 35 ab 01 b6 3c 5f a5 f6 0d bc c2 17 83 ea 2b 64 2b 6e 8d ad f1 4d 3a 3f d4 72 01 86 4f b1 d8 c5 6c 9c c4 83 96 b0 3d 4b 05 59 9b fc 4a 6a 60 47 d5 fb 27 fb 31 c4 06 e6 7e 1d 17 3e c6 75 e5 ae 47 30 aa e2 02 d6 5b a5 3c 8e 76 ba d1 ec ba c8 34 1f ad 8e c2 bc 13 e7 c2 d0 3e 0c 2e 8f 51 6c 99 c5 6b 5e 71 7a 22 cc ce a9 67 ef 06 1c 05 9c dc f6 03 93 22 fd 2a 84 62 63 25 73 7f 67 a0 57 cb a8 f0 dd 67 0c 6a 28 c1 07 ef 3f be 25 4e 7e 9d 28 16 fb 1e c8 b0 0e a0 37 48 9d a4 6f 21 c1";
    string ap_mask = "67 66 51 fd 3c e6 ef b5 5c 74 3b cf 0d 91 00 ac fe 50 6f d3 b5 51 ca 02 80 ae 90 97 5b ed cc 4f ae f9 b6 3c d2 f8 0b 2c 31 fe 29 6b 4b cb 0d b5 f1 18 b4 7c 09 f6 1a 22 31 3b 58 a2 a7 35 ac 5b 97 15 48 7d c2 e8 75 81 97 53 24 3e 73 ee 5a b4 ee b9 9e 4e 0d 75 c5 00 4a 4c 0f 91 74 e9 90 23 4d 84 8b 73 3d 60 2b e3 95 c3 da 1e 32 ba 6a 5b d3 21 f5 e2 e4 90 86 ee b3 ac 43 26 6d 30 5b 18 cc 20 b0 c8 36 79 cb 0d b1 63 ea 03 37 ca bd 12 24 de 29 8c e1 c1 9c ed ee f8 77 3e fd 43 bf 90 0b 3e f2 2c f9 37 d4 40 ee 82 74 3c 41 ac 31 47 f6 ed cd 56 d2 3e d1 8a 23 1d e5 26 41 94 d1 0e 52 b9 18 a0 f2 15 f6 69 55 4e 0e 02 3f 07 1c 8f 19 4c da 9b 50 2f 6e 35 ee 3e d7 a1 66 f4 60 7f 86 be 0e 16 54 f2 4c 5a be 48 c5 5d c0 a3 b2 c3 b6 70 24 92 8c ea 0f f8 42 09 95 9b 04 0c 64 9e b2 a9 ec a4 c6 a5 f0 c5 20 8e 74 05 7a 68 5e 4e b2 15 b4 8e f5 48 86 0a 26 82 f9 aa bb d0 00 b5 2a 8a 58 7d 97 b7 9b 89 ad df 0a f9 4d 01 5c 94 3b f3 b5 e9 02 a0 2c 09 a2 b4 c4 ef 1f 69 88 7e 55 11 d4 e3 bb b8 a1 22 c2 ab 93 67 cb b6 08 6d 15 5f 1d e3 42 ad 9e 74 c8 25 98 ca da 4f af e1 8e f5 85 c4 5c f2 ff c1 e3 63 92 4d c2 ac 1c f0 ce 04 ee aa 25 23 91 a5 9d 08 8c bb 62 2d 2f 67";
    trim(ap_priv, ' ');
    trim(ap_mask, ' ');
    cout << "ap_priv:" << ap_priv << endl;
    cout << "ap_mask:" << ap_mask << endl;

    gmp_printf("---------------------------------------------------\n");
    gmp_printf("Starting dragonfly commit exchange...\n");
    gmp_printf("---------------------------------------------------\n");
    //sta.commit_exchange();
    sta.commit_exchange(sta_priv, sta_mask);
    gmp_printf("---------------------------------------------------\n");
    //ap.commit_exchange();
    ap.commit_exchange(ap_priv, ap_mask);

    gmp_printf("---------------------------------------------------\n");
    gmp_printf("Computing shared secret...\n");
    gmp_printf("---------------------------------------------------\n");

    string sta_token = sta.compute_shared_secret(ap.scalar, ap.element);
    gmp_printf("---------------------------------------------------\n");
    string ap_token = ap.compute_shared_secret(sta.scalar, sta.element);

    gmp_printf("---------------------------------------------------\n");
    gmp_printf("Confirm Exchange...\n");
    sta.confirm_exchange(ap_token);
    gmp_printf("---------------------------------------------------\n");
    ap.confirm_exchange(sta_token);

    return 0;
}